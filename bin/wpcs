#!/usr/bin/env node

const path = require("path");
const program = require("caporal");
const updateNotifier = require("update-notifier");
const ora = require("ora");
const chalk = require("chalk");
const pkg = require("../package.json");
const WPCS = require("../index");
const logger = require("../lib/logger");
const { rulesetList, rulesetTypes } = require("../lib/fixtures");

const simpleDotsLoader = {
  interval: 70,
  frames: [".  ", ".. ", " ..", " ..", "  .", "   "]
};

const action = (args, options) => {
  let dirpaths = args.path;
  if (!dirpaths || dirpaths.length === 0) {
    dirpaths = [process.cwd()];
  }

  let rule = options.rule;
  if (!rule) {
    rule = `${rulesetTypes.WORDPRESS_CORE}`;
  }

  let excludes = [];
  if (options.excludes && options.excludes.length) {
    excludes = options.excludes.map(item => {
      item = item.trim();
      if (!path.extname(item)) {
        item += "/**";
      }
      return `**/${item}`;
    });
  }

  let spinner;
  const wpcs = new WPCS(dirpaths, rule, excludes);
  const logs = {};

  wpcs.process.on("error", err => {
    logger.blank();
    logger.blank();
    logger.tab(`${chalk.underline.white("Error")}: `);
    logger.error2(err);
    logger.blank();
  });

  wpcs.on("start", () => {
    if (!options.json) {
      logger.blank();
      spinner = ora("Scanning Files").start();
      spinner.spinner = simpleDotsLoader;
    }
  });

  wpcs.on("scan", filename => {
    if (!options.json) {
      spinner.text = filename ? `Scanning ${filename}` : "Working...";
    }
  });

  const addToLog = (filename, info) => {
    if (!logs[filename]) {
      logs[filename] = [];
    }

    logs[filename].push(info);
  };

  wpcs.on("error", addToLog);

  if (!options.skipWarning) {
    wpcs.on("warning", addToLog);
  }

  wpcs.on("done", totals => {
    const hasViolations =
      totals.errors > 0 || (totals.warnings > 0 && !options.skipWarning);

    if (options.json) {
      if (!options.noFix) {
        wpcs.fix();
        return;
      }

      logger.json(logs);

      if (hasViolations) {
        process.exit(1);
      } else {
        process.exit();
      }
    }

    if (hasViolations) {
      spinner.succeed(`Scanned ${totals.files} files.`);

      for (const filename in logs) {
        if (Object.prototype.hasOwnProperty.call(logs, filename)) {
          logger.blank();
          logger.tab(`${chalk.underline.white(filename)}`);
          logs[filename].forEach(item => {
            switch (item.type) {
              case "ERROR":
                logger.error(item);
                break;
              case "WARNING":
                logger.warning(item);
                break;
            }
          });
        }
      }

      let hasFixableCodes = "";
      if (totals.fixables > 0) {
        const singplural = totals.fixables > 1 ? "s are" : " is";
        hasFixableCodes = `. Good news, ${chalk.underline.green(
          totals.fixables
        )} file${singplural} fixable.`;
      }

      let warningsMsg = "";
      if (!options.skipWarning) {
        warningsMsg = ` and ${chalk.underline.white(totals.warnings)} warnings`;
      }

      logger.blank();
      logger.symbol(
        `You've got ${chalk.underline.white(
          totals.errors
        )} errors${warningsMsg}${hasFixableCodes}`,
        "error"
      );
      logger.blank();

      if (options.noFix) {
        process.exit(1);
      }

      wpcs.fix();
    } else {
      spinner.succeed("Done. No Error or Warning Found.");
      logger.blank();
      process.exit();
    }
  });

  let fixloader;

  wpcs.on("fix", () => {
    if (!options.json) {
      logger.blank();
      fixloader = ora("Fixing Violations").start();
      fixloader.spinner = simpleDotsLoader;
    }
  });

  wpcs.on("fixing", filename => {
    if (!options.json) {
      fixloader.text = `Fixing ${filename}`;
    }
  });

  wpcs.on("fixed", files => {
    const fixedMsg =
      files.length > 0
        ? `${files.length} files has been fixed.`
        : "Nothing Fixed.";

    if (options.json) {
      logger.json({
        message: fixedMsg
      });
    } else {
      fixloader.succeed(fixedMsg);
      logger.blank();
    }
  });
};

program
  .version(pkg.version)
  .description("Check WordPress Coding Standard")
  .argument("[path...]", "Script path could be a directory or filename.", program.LIST)
  .option(
    "--rule <rulename>",
    `Default rule is WordPress-Core. ${rulesetList.join(
      " | "
    )}.`,
    program.STRING
  )
  .option("--no-fix", "Do not auto fix errors.", program.BOOLEAN)
  .option("--skip-warning", "Skip Warning.", program.BOOLEAN)
  .option("--excludes <paths>", "Ignore paths, separated by commas.", program.LIST)
  .option("--json", "Print output in JSON format", program.BOOLEAN)
  .action(action);

program.parse(process.argv);

// Notify update, cached every hour
updateNotifier({
  pkg,
  updateCheckInterval: 1000 * 60 * 60
}).notify();
